{"ast":null,"code":"var _jsxFileName = \"D:\\\\VSC Projects\\\\SvenDevPortfolio-1\\\\src\\\\components\\\\ImageSlider.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useMemo, useCallback } from 'react';\nimport { motion, AnimatePresence, LayoutGroup } from 'framer-motion';\nimport '../styles/ImageSliderStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageSlider = () => {\n  _s();\n  const trackRef = useRef(null);\n  const [isFullScreen, setIsFullScreen] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Memoize images to prevent unnecessary re-renders\n  const images = useMemo(() => Array.from({\n    length: 10\n  }, (_, index) => `/images/${index + 1}.jpg`), []);\n\n  // Preload images to reduce initial load stutter\n  useEffect(() => {\n    const imagePromises = images.map(src => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = src;\n        img.onload = resolve;\n        img.onerror = reject;\n      });\n    });\n    Promise.all(imagePromises).then(() => setIsLoading(false)).catch(error => {\n      console.error('Error preloading images:', error);\n      setIsLoading(false);\n    });\n  }, [images]);\n\n  // Memoize slider state to reduce unnecessary re-renders\n  const [sliderState, setSliderState] = useState({\n    mouseDownAt: 0,\n    prevPercentage: 0,\n    percentage: 0\n  });\n\n  // Optimize event handlers with useCallback\n  const handleSliderInteraction = useCallback((type, e) => {\n    var _e$touches$;\n    if (isFullScreen || isLoading) return;\n    const clientX = e.clientX || e.touches && ((_e$touches$ = e.touches[0]) === null || _e$touches$ === void 0 ? void 0 : _e$touches$.clientX);\n    switch (type) {\n      case 'down':\n        setSliderState(prev => ({\n          ...prev,\n          mouseDownAt: clientX\n        }));\n        break;\n      case 'up':\n        setSliderState(prev => ({\n          ...prev,\n          mouseDownAt: 0,\n          prevPercentage: prev.percentage\n        }));\n        break;\n      case 'move':\n        if (sliderState.mouseDownAt === 0) return;\n        const track = trackRef.current;\n        const mouseDelta = sliderState.mouseDownAt - clientX;\n        const maxDelta = window.innerWidth / 2;\n        const percentage = mouseDelta / maxDelta * -100;\n        const nextPercentageUnconstrained = sliderState.prevPercentage + percentage;\n        const nextPercentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -100);\n\n        // Use requestAnimationFrame for smoother animations\n        requestAnimationFrame(() => {\n          setSliderState(prev => ({\n            ...prev,\n            percentage: nextPercentage\n          }));\n          if (track) {\n            track.style.transform = `translate(${nextPercentage}%, -50%)`;\n            const images = track.getElementsByClassName(\"image\");\n            Array.from(images).forEach(image => {\n              image.style.objectPosition = `${100 + nextPercentage}% center`;\n            });\n          }\n        });\n        break;\n    }\n  }, [isFullScreen, isLoading, sliderState]);\n\n  // Attach event listeners more efficiently\n  useEffect(() => {\n    const track = trackRef.current;\n    if (!track) return;\n    const eventTypes = {\n      mousedown: 'down',\n      mousemove: 'move',\n      mouseup: 'up',\n      touchstart: 'down',\n      touchmove: 'move',\n      touchend: 'up'\n    };\n    const handleEvent = type => e => handleSliderInteraction(type, e);\n    const events = Object.keys(eventTypes);\n    events.forEach(eventName => {\n      window.addEventListener(eventName, handleEvent(eventTypes[eventName]));\n    });\n    return () => {\n      events.forEach(eventName => {\n        window.removeEventListener(eventName, handleEvent(eventTypes[eventName]));\n      });\n    };\n  }, [handleSliderInteraction]);\n\n  // Optimize image click handler\n  const handleImageClick = useCallback((e, src, index) => {\n    if (isLoading) return;\n\n    // If already in full screen and clicking the same image, close it\n    if (isFullScreen && selectedImage === src) {\n      setIsFullScreen(false);\n      setSelectedImage(null);\n      return;\n    }\n\n    // Capture the exact state of the image at click\n    const imgElement = e.target;\n    const rect = imgElement.getBoundingClientRect();\n\n    // Get computed style to capture exact object-position\n    const computedStyle = window.getComputedStyle(imgElement);\n    const objectPosition = computedStyle.objectPosition;\n    setSelectedImage(src);\n    setSelectedIndex(index);\n    setIsFullScreen(true);\n  }, [isFullScreen, selectedImage, isLoading]);\n\n  // Render loading state if images are not yet loaded\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100vw',\n        height: '100vh',\n        backgroundColor: 'black',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: 'white'\n      },\n      children: \"Loading images...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(LayoutGroup, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"image-track\",\n      ref: trackRef,\n      style: {\n        transform: `translate(${sliderState.percentage}%, -50%)`\n      },\n      children: images.map((src, index) => /*#__PURE__*/_jsxDEV(motion.img, {\n        layoutId: `image-${index}`,\n        className: \"image\",\n        src: src,\n        alt: `Image ${index + 1}`,\n        draggable: \"false\",\n        onClick: e => handleImageClick(e, src, index),\n        whileHover: {\n          scale: 1.05,\n          duration: 2\n        },\n        style: {\n          cursor: 'pointer',\n          willChange: 'transform'\n        }\n      }, src, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: isFullScreen && selectedImage && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          width: 0,\n          height: 0,\n          backgroundColor: 'black',\n          zIndex: 1000,\n          overflow: 'hidden'\n        },\n        animate: {\n          top: 0,\n          left: 0,\n          width: '100vw',\n          height: '100vh',\n          scale: 1\n        },\n        exit: {\n          top: 0,\n          left: 0,\n          width: 0,\n          height: 0,\n          scale: 1\n        },\n        transition: {\n          duration: 0.4,\n          type: \"tween\"\n        },\n        onClick: () => setIsFullScreen(false),\n        children: /*#__PURE__*/_jsxDEV(motion.img, {\n          src: selectedImage,\n          style: {\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover',\n            objectPosition: 'center'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageSlider, \"rYosq4M/44SvAofmzJ6dZerAuFM=\");\n_c = ImageSlider;\nexport default ImageSlider;\nvar _c;\n$RefreshReg$(_c, \"ImageSlider\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useMemo","useCallback","motion","AnimatePresence","LayoutGroup","jsxDEV","_jsxDEV","ImageSlider","_s","trackRef","isFullScreen","setIsFullScreen","selectedImage","setSelectedImage","selectedIndex","setSelectedIndex","isLoading","setIsLoading","images","Array","from","length","_","index","imagePromises","map","src","Promise","resolve","reject","img","Image","onload","onerror","all","then","catch","error","console","sliderState","setSliderState","mouseDownAt","prevPercentage","percentage","handleSliderInteraction","type","e","_e$touches$","clientX","touches","prev","track","current","mouseDelta","maxDelta","window","innerWidth","nextPercentageUnconstrained","nextPercentage","Math","max","min","requestAnimationFrame","style","transform","getElementsByClassName","forEach","image","objectPosition","eventTypes","mousedown","mousemove","mouseup","touchstart","touchmove","touchend","handleEvent","events","Object","keys","eventName","addEventListener","removeEventListener","handleImageClick","imgElement","target","rect","getBoundingClientRect","computedStyle","getComputedStyle","position","top","left","width","height","backgroundColor","display","justifyContent","alignItems","color","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","layoutId","className","alt","draggable","onClick","whileHover","scale","duration","cursor","willChange","div","initial","zIndex","overflow","animate","exit","transition","objectFit","_c","$RefreshReg$"],"sources":["D:/VSC Projects/SvenDevPortfolio-1/src/components/ImageSlider.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useMemo, useCallback } from 'react';\r\nimport { motion, AnimatePresence, LayoutGroup } from 'framer-motion';\r\nimport '../styles/ImageSliderStyles.css';\r\n\r\nconst ImageSlider = () => {\r\n    const trackRef = useRef(null);\r\n    const [isFullScreen, setIsFullScreen] = useState(false);\r\n    const [selectedImage, setSelectedImage] = useState(null);\r\n    const [selectedIndex, setSelectedIndex] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // Memoize images to prevent unnecessary re-renders\r\n    const images = useMemo(() => \r\n        Array.from({ length: 10 }, (_, index) => `/images/${index + 1}.jpg`),\r\n        []\r\n    );\r\n\r\n    // Preload images to reduce initial load stutter\r\n    useEffect(() => {\r\n        const imagePromises = images.map(src => {\r\n            return new Promise((resolve, reject) => {\r\n                const img = new Image();\r\n                img.src = src;\r\n                img.onload = resolve;\r\n                img.onerror = reject;\r\n            });\r\n        });\r\n\r\n        Promise.all(imagePromises)\r\n            .then(() => setIsLoading(false))\r\n            .catch(error => {\r\n                console.error('Error preloading images:', error);\r\n                setIsLoading(false);\r\n            });\r\n    }, [images]);\r\n\r\n    // Memoize slider state to reduce unnecessary re-renders\r\n    const [sliderState, setSliderState] = useState({\r\n        mouseDownAt: 0,\r\n        prevPercentage: 0,\r\n        percentage: 0\r\n    });\r\n\r\n    // Optimize event handlers with useCallback\r\n    const handleSliderInteraction = useCallback((type, e) => {\r\n        if (isFullScreen || isLoading) return;\r\n\r\n        const clientX = e.clientX || (e.touches && e.touches[0]?.clientX);\r\n\r\n        switch (type) {\r\n            case 'down':\r\n                setSliderState(prev => ({\r\n                    ...prev,\r\n                    mouseDownAt: clientX\r\n                }));\r\n                break;\r\n            case 'up':\r\n                setSliderState(prev => ({\r\n                    ...prev,\r\n                    mouseDownAt: 0,\r\n                    prevPercentage: prev.percentage\r\n                }));\r\n                break;\r\n            case 'move':\r\n                if (sliderState.mouseDownAt === 0) return;\r\n\r\n                const track = trackRef.current;\r\n                const mouseDelta = sliderState.mouseDownAt - clientX;\r\n                const maxDelta = window.innerWidth / 2;\r\n\r\n                const percentage = (mouseDelta / maxDelta) * -100;\r\n                const nextPercentageUnconstrained = sliderState.prevPercentage + percentage;\r\n                const nextPercentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -100);\r\n\r\n                // Use requestAnimationFrame for smoother animations\r\n                requestAnimationFrame(() => {\r\n                    setSliderState(prev => ({\r\n                        ...prev,\r\n                        percentage: nextPercentage\r\n                    }));\r\n\r\n                    if (track) {\r\n                        track.style.transform = `translate(${nextPercentage}%, -50%)`;\r\n\r\n                        const images = track.getElementsByClassName(\"image\");\r\n                        Array.from(images).forEach((image) => {\r\n                            image.style.objectPosition = `${100 + nextPercentage}% center`;\r\n                        });\r\n                    }\r\n                });\r\n                break;\r\n        }\r\n    }, [isFullScreen, isLoading, sliderState]);\r\n\r\n    // Attach event listeners more efficiently\r\n    useEffect(() => {\r\n        const track = trackRef.current;\r\n        if (!track) return;\r\n\r\n        const eventTypes = {\r\n            mousedown: 'down',\r\n            mousemove: 'move',\r\n            mouseup: 'up',\r\n            touchstart: 'down',\r\n            touchmove: 'move',\r\n            touchend: 'up'\r\n        };\r\n\r\n        const handleEvent = (type) => (e) => handleSliderInteraction(type, e);\r\n\r\n        const events = Object.keys(eventTypes);\r\n        events.forEach(eventName => {\r\n            window.addEventListener(eventName, handleEvent(eventTypes[eventName]));\r\n        });\r\n\r\n        return () => {\r\n            events.forEach(eventName => {\r\n                window.removeEventListener(eventName, handleEvent(eventTypes[eventName]));\r\n            });\r\n        };\r\n    }, [handleSliderInteraction]);\r\n\r\n    // Optimize image click handler\r\n    const handleImageClick = useCallback((e, src, index) => {\r\n        if (isLoading) return;\r\n\r\n        // If already in full screen and clicking the same image, close it\r\n        if (isFullScreen && selectedImage === src) {\r\n            setIsFullScreen(false);\r\n            setSelectedImage(null);\r\n            return;\r\n        }\r\n\r\n        // Capture the exact state of the image at click\r\n        const imgElement = e.target;\r\n        const rect = imgElement.getBoundingClientRect();\r\n        \r\n        // Get computed style to capture exact object-position\r\n        const computedStyle = window.getComputedStyle(imgElement);\r\n        const objectPosition = computedStyle.objectPosition;\r\n\r\n        setSelectedImage(src);\r\n        setSelectedIndex(index);\r\n        setIsFullScreen(true);\r\n    }, [isFullScreen, selectedImage, isLoading]);\r\n\r\n    // Render loading state if images are not yet loaded\r\n    if (isLoading) {\r\n        return (\r\n            <div \r\n                style={{\r\n                    position: 'fixed', \r\n                    top: 0, \r\n                    left: 0, \r\n                    width: '100vw', \r\n                    height: '100vh', \r\n                    backgroundColor: 'black', \r\n                    display: 'flex', \r\n                    justifyContent: 'center', \r\n                    alignItems: 'center',\r\n                    color: 'white'\r\n                }}\r\n            >\r\n                Loading images...\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <LayoutGroup>\r\n            <div \r\n                id=\"image-track\" \r\n                ref={trackRef} \r\n                style={{ \r\n                    transform: `translate(${sliderState.percentage}%, -50%)` \r\n                }}\r\n            >\r\n                {images.map((src, index) => (\r\n                    <motion.img\r\n                        layoutId={`image-${index}`}\r\n                        key={src}\r\n                        className=\"image\"\r\n                        src={src}\r\n                        alt={`Image ${index + 1}`}\r\n                        draggable=\"false\"\r\n                        onClick={(e) => handleImageClick(e, src, index)}\r\n                        whileHover={{ scale: 1.05, duration: 2}}\r\n                        style={{\r\n                            cursor: 'pointer',\r\n                            willChange: 'transform',\r\n                        }}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <AnimatePresence>\r\n                {isFullScreen && selectedImage && (\r\n                    <motion.div\r\n                        initial={{\r\n                            position: 'fixed',\r\n                            top: 0,\r\n                            left: 0,\r\n                            width: 0,\r\n                            height: 0,\r\n                            backgroundColor: 'black',\r\n                            zIndex: 1000,\r\n                            overflow: 'hidden'\r\n                        }}\r\n                        animate={{\r\n                            top: 0,\r\n                            left: 0,\r\n                            width: '100vw',\r\n                            height: '100vh',\r\n                            scale: 1\r\n                        }}\r\n                        exit={{\r\n                            top: 0,\r\n                            left: 0,\r\n                            width: 0,\r\n                            height: 0,\r\n                            scale: 1\r\n                        }}\r\n                        transition={{\r\n                            duration: 0.4,\r\n                            type: \"tween\"\r\n                        }}\r\n                        onClick={() => setIsFullScreen(false)}\r\n                    >\r\n                        <motion.img\r\n                            src={selectedImage}\r\n                            style={{\r\n                                width: '100%',\r\n                                height: '100%',\r\n                                objectFit: 'cover',\r\n                                objectPosition: 'center',\r\n                            }}\r\n                        />\r\n                    </motion.div>\r\n                )}\r\n            </AnimatePresence>\r\n        </LayoutGroup>\r\n    );\r\n};\r\n\r\nexport default ImageSlider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}