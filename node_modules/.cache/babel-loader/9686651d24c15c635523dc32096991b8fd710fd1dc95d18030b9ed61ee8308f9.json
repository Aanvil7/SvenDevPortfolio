{"ast":null,"code":"var _jsxFileName = \"D:\\\\VSC Projects\\\\SvenDevPortfolio-1\\\\src\\\\components\\\\ImageSlider.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { motion, AnimatePresence, LayoutGroup } from 'framer-motion';\nimport '../styles/ImageSliderStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageSlider = () => {\n  _s();\n  const trackRef = useRef(null);\n  const [isFullScreen, setIsFullScreen] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const [imageTransitionState, setImageTransitionState] = useState({\n    rect: null,\n    objectPosition: '100% center',\n    scale: 1\n  });\n  const [sliderState, setSliderState] = useState({\n    mouseDownAt: 0,\n    prevPercentage: 0,\n    percentage: 0\n  });\n  useEffect(() => {\n    const track = trackRef.current;\n    if (!track) return;\n    const handleOnDown = e => {\n      var _e$touches$;\n      if (isFullScreen) return;\n      const clientX = e.clientX || e.touches && ((_e$touches$ = e.touches[0]) === null || _e$touches$ === void 0 ? void 0 : _e$touches$.clientX);\n      setSliderState(prev => ({\n        ...prev,\n        mouseDownAt: clientX\n      }));\n    };\n    const handleOnUp = () => {\n      if (isFullScreen) return;\n      setSliderState(prev => ({\n        ...prev,\n        mouseDownAt: 0,\n        prevPercentage: prev.percentage\n      }));\n    };\n    const handleOnMove = e => {\n      var _e$touches$2;\n      if (isFullScreen) return;\n      const clientX = e.clientX || e.touches && ((_e$touches$2 = e.touches[0]) === null || _e$touches$2 === void 0 ? void 0 : _e$touches$2.clientX);\n      if (sliderState.mouseDownAt === 0) return;\n      const mouseDelta = sliderState.mouseDownAt - clientX;\n      const maxDelta = window.innerWidth / 2;\n      const percentage = mouseDelta / maxDelta * -100;\n      const nextPercentageUnconstrained = sliderState.prevPercentage + percentage;\n      const nextPercentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -100);\n      setSliderState(prev => ({\n        ...prev,\n        percentage: nextPercentage\n      }));\n      if (track) {\n        track.animate({\n          transform: `translate(${nextPercentage}%, -50%)`\n        }, {\n          duration: 1200,\n          fill: 'forwards'\n        });\n        const images = track.getElementsByClassName(\"image\");\n        Array.from(images).forEach(image => {\n          image.animate({\n            objectPosition: `${100 + nextPercentage}% center`\n          }, {\n            duration: 1200,\n            fill: 'forwards'\n          });\n        });\n      }\n    };\n    window.addEventListener('mousedown', handleOnDown);\n    window.addEventListener('mousemove', handleOnMove);\n    window.addEventListener('mouseup', handleOnUp);\n    window.addEventListener('touchstart', handleOnDown);\n    window.addEventListener('touchmove', handleOnMove);\n    window.addEventListener('touchend', handleOnUp);\n    return () => {\n      window.removeEventListener('mousedown', handleOnDown);\n      window.removeEventListener('mousemove', handleOnMove);\n      window.removeEventListener('mouseup', handleOnUp);\n      window.removeEventListener('touchstart', handleOnDown);\n      window.removeEventListener('touchmove', handleOnMove);\n      window.removeEventListener('touchend', handleOnUp);\n    };\n  }, [isFullScreen, sliderState]);\n  const handleImageClick = (e, src, index) => {\n    // If already in full screen and clicking the same image, close it\n    if (isFullScreen && selectedImage === src) {\n      setIsFullScreen(false);\n      setSelectedImage(null);\n      return;\n    }\n\n    // Capture the exact state of the image at click\n    const imgElement = e.target;\n    const rect = imgElement.getBoundingClientRect();\n\n    // Get computed style to capture exact object-position\n    const computedStyle = window.getComputedStyle(imgElement);\n    const objectPosition = computedStyle.objectPosition;\n    setImageTransitionState({\n      rect: {\n        top: rect.top,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height\n      },\n      objectPosition,\n      scale: 1 // Matches the hover scale\n    });\n\n    // Set full screen state\n    setSelectedImage(src);\n    setSelectedIndex(index);\n    setIsFullScreen(true);\n  };\n  const images = Array.from({\n    length: 10\n  }, (_, index) => `/images/${index + 1}.jpg`);\n  return /*#__PURE__*/_jsxDEV(LayoutGroup, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"image-track\",\n      ref: trackRef,\n      style: {\n        transform: `translate(${sliderState.percentage}%, -50%)`\n      },\n      children: images.map((src, index) => /*#__PURE__*/_jsxDEV(motion.img, {\n        layoutId: `image-${index}`,\n        className: \"image\",\n        src: src,\n        alt: `Image ${index + 1}`,\n        draggable: \"false\",\n        onClick: e => handleImageClick(e, src, index),\n        whileHover: {\n          scale: 1.05,\n          duration: 2\n        },\n        style: {\n          cursor: 'pointer',\n          willChange: 'transform'\n        }\n      }, src, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: isFullScreen && imageTransitionState.rect && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          position: 'fixed',\n          top: imageTransitionState.rect.top,\n          left: imageTransitionState.rect.left,\n          width: imageTransitionState.rect.width,\n          height: imageTransitionState.rect.height,\n          scale: imageTransitionState.scale,\n          backgroundColor: 'black',\n          zIndex: 1000,\n          overflow: 'hidden'\n        },\n        animate: {\n          top: 0,\n          left: 0,\n          width: '100vw',\n          height: '100vh',\n          scale: 1\n        },\n        exit: {\n          top: imageTransitionState.rect.top,\n          left: imageTransitionState.rect.left,\n          width: imageTransitionState.rect.width,\n          height: imageTransitionState.rect.height,\n          scale: imageTransitionState.scale\n        },\n        transition: {\n          duration: 0.4,\n          type: \"tween\"\n        },\n        onClick: () => setIsFullScreen(false),\n        children: /*#__PURE__*/_jsxDEV(motion.img, {\n          src: selectedImage,\n          style: {\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover',\n            objectPosition: imageTransitionState.objectPosition,\n            transform: `scale(${imageTransitionState.scale})`,\n            transformOrigin: 'center center'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageSlider, \"pQTQi9MKfdLWG76GAT3MR3bgkgs=\");\n_c = ImageSlider;\nexport default ImageSlider;\nvar _c;\n$RefreshReg$(_c, \"ImageSlider\");","map":{"version":3,"names":["React","useEffect","useRef","useState","motion","AnimatePresence","LayoutGroup","jsxDEV","_jsxDEV","ImageSlider","_s","trackRef","isFullScreen","setIsFullScreen","selectedImage","setSelectedImage","selectedIndex","setSelectedIndex","imageTransitionState","setImageTransitionState","rect","objectPosition","scale","sliderState","setSliderState","mouseDownAt","prevPercentage","percentage","track","current","handleOnDown","e","_e$touches$","clientX","touches","prev","handleOnUp","handleOnMove","_e$touches$2","mouseDelta","maxDelta","window","innerWidth","nextPercentageUnconstrained","nextPercentage","Math","max","min","animate","transform","duration","fill","images","getElementsByClassName","Array","from","forEach","image","addEventListener","removeEventListener","handleImageClick","src","index","imgElement","target","getBoundingClientRect","computedStyle","getComputedStyle","top","left","width","height","length","_","children","id","ref","style","map","img","layoutId","className","alt","draggable","onClick","whileHover","cursor","willChange","fileName","_jsxFileName","lineNumber","columnNumber","div","initial","position","backgroundColor","zIndex","overflow","exit","transition","type","objectFit","transformOrigin","_c","$RefreshReg$"],"sources":["D:/VSC Projects/SvenDevPortfolio-1/src/components/ImageSlider.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { motion, AnimatePresence, LayoutGroup } from 'framer-motion';\r\nimport '../styles/ImageSliderStyles.css';\r\n\r\nconst ImageSlider = () => {\r\n    const trackRef = useRef(null);\r\n    const [isFullScreen, setIsFullScreen] = useState(false);\r\n    const [selectedImage, setSelectedImage] = useState(null);\r\n    const [selectedIndex, setSelectedIndex] = useState(null);\r\n    const [imageTransitionState, setImageTransitionState] = useState({\r\n        rect: null,\r\n        objectPosition: '100% center',\r\n        scale: 1\r\n    });\r\n\r\n    const [sliderState, setSliderState] = useState({\r\n        mouseDownAt: 0,\r\n        prevPercentage: 0,\r\n        percentage: 0\r\n    });\r\n\r\n    useEffect(() => {\r\n        const track = trackRef.current;\r\n        if (!track) return;\r\n\r\n        const handleOnDown = (e) => {\r\n            if (isFullScreen) return;\r\n            \r\n            const clientX = e.clientX || (e.touches && e.touches[0]?.clientX);\r\n            setSliderState(prev => ({\r\n                ...prev,\r\n                mouseDownAt: clientX\r\n            }));\r\n        };\r\n\r\n        const handleOnUp = () => {\r\n            if (isFullScreen) return;\r\n            \r\n            setSliderState(prev => ({\r\n                ...prev,\r\n                mouseDownAt: 0,\r\n                prevPercentage: prev.percentage\r\n            }));\r\n        };\r\n\r\n        const handleOnMove = (e) => {\r\n            if (isFullScreen) return;\r\n            \r\n            const clientX = e.clientX || (e.touches && e.touches[0]?.clientX);\r\n            \r\n            if (sliderState.mouseDownAt === 0) return;\r\n\r\n            const mouseDelta = sliderState.mouseDownAt - clientX;\r\n            const maxDelta = window.innerWidth / 2;\r\n\r\n            const percentage = (mouseDelta / maxDelta) * -100;\r\n            const nextPercentageUnconstrained = sliderState.prevPercentage + percentage;\r\n            const nextPercentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -100);\r\n\r\n            setSliderState(prev => ({\r\n                ...prev,\r\n                percentage: nextPercentage\r\n            }));\r\n\r\n            if (track) {\r\n                track.animate(\r\n                    {\r\n                        transform: `translate(${nextPercentage}%, -50%)`\r\n                    },\r\n                    { duration: 1200, fill: 'forwards' }\r\n                );\r\n\r\n                const images = track.getElementsByClassName(\"image\");\r\n                Array.from(images).forEach((image) => {\r\n                    image.animate(\r\n                        {\r\n                            objectPosition: `${100 + nextPercentage}% center`\r\n                        },\r\n                        { \r\n                            duration: 1200, \r\n                            fill: 'forwards' \r\n                        }\r\n                    );\r\n                });\r\n            }\r\n        };\r\n\r\n        window.addEventListener('mousedown', handleOnDown);\r\n        window.addEventListener('mousemove', handleOnMove);\r\n        window.addEventListener('mouseup', handleOnUp);\r\n        \r\n        window.addEventListener('touchstart', handleOnDown);\r\n        window.addEventListener('touchmove', handleOnMove);\r\n        window.addEventListener('touchend', handleOnUp);\r\n\r\n        return () => {\r\n            window.removeEventListener('mousedown', handleOnDown);\r\n            window.removeEventListener('mousemove', handleOnMove);\r\n            window.removeEventListener('mouseup', handleOnUp);\r\n            \r\n            window.removeEventListener('touchstart', handleOnDown);\r\n            window.removeEventListener('touchmove', handleOnMove);\r\n            window.removeEventListener('touchend', handleOnUp);\r\n        };\r\n    }, [isFullScreen, sliderState]);\r\n\r\n    const handleImageClick = (e, src, index) => {\r\n        // If already in full screen and clicking the same image, close it\r\n        if (isFullScreen && selectedImage === src) {\r\n            setIsFullScreen(false);\r\n            setSelectedImage(null);\r\n            return;\r\n        }\r\n\r\n        // Capture the exact state of the image at click\r\n        const imgElement = e.target;\r\n        const rect = imgElement.getBoundingClientRect();\r\n        \r\n        // Get computed style to capture exact object-position\r\n        const computedStyle = window.getComputedStyle(imgElement);\r\n        const objectPosition = computedStyle.objectPosition;\r\n\r\n        setImageTransitionState({\r\n            rect: {\r\n                top: rect.top,\r\n                left: rect.left,\r\n                width: rect.width,\r\n                height: rect.height\r\n            },\r\n            objectPosition,\r\n            scale: 1  // Matches the hover scale\r\n        });\r\n\r\n        // Set full screen state\r\n        setSelectedImage(src);\r\n        setSelectedIndex(index);\r\n        setIsFullScreen(true);\r\n    };\r\n\r\n    const images = Array.from({ length: 10 }, (_, index) => `/images/${index + 1}.jpg`);\r\n\r\n    return (\r\n        <LayoutGroup>\r\n            <div \r\n                id=\"image-track\" \r\n                ref={trackRef} \r\n                style={{ \r\n                    transform: `translate(${sliderState.percentage}%, -50%)` \r\n                }}\r\n            >\r\n                {images.map((src, index) => (\r\n                    <motion.img\r\n                        layoutId={`image-${index}`}\r\n                        key={src}\r\n                        className=\"image\"\r\n                        src={src}\r\n                        alt={`Image ${index + 1}`}\r\n                        draggable=\"false\"\r\n                        onClick={(e) => handleImageClick(e, src, index)}\r\n                        whileHover={{ scale: 1.05, duration: 2}}\r\n                        style={{\r\n                            cursor: 'pointer',\r\n                            willChange: 'transform',\r\n                        }}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <AnimatePresence>\r\n                {isFullScreen && imageTransitionState.rect && (\r\n                    <motion.div\r\n                        initial={{\r\n                            position: 'fixed',\r\n                            top: imageTransitionState.rect.top,\r\n                            left: imageTransitionState.rect.left,\r\n                            width: imageTransitionState.rect.width,\r\n                            height: imageTransitionState.rect.height,\r\n                            scale: imageTransitionState.scale,\r\n                            backgroundColor: 'black',\r\n                            zIndex: 1000,\r\n                            overflow: 'hidden'\r\n                        }}\r\n                        animate={{\r\n                            top: 0,\r\n                            left: 0,\r\n                            width: '100vw',\r\n                            height: '100vh',\r\n                            scale: 1\r\n                        }}\r\n                        exit={{\r\n                            top: imageTransitionState.rect.top,\r\n                            left: imageTransitionState.rect.left,\r\n                            width: imageTransitionState.rect.width,\r\n                            height: imageTransitionState.rect.height,\r\n                            scale: imageTransitionState.scale\r\n                        }}\r\n                        transition={{\r\n                            duration: 0.4,\r\n                            type: \"tween\"\r\n                        }}\r\n                        onClick={() => setIsFullScreen(false)}\r\n                    >\r\n                        <motion.img\r\n                            src={selectedImage}\r\n                            style={{\r\n                                width: '100%',\r\n                                height: '100%',\r\n                                objectFit: 'cover',\r\n                                objectPosition: imageTransitionState.objectPosition,\r\n                                transform: `scale(${imageTransitionState.scale})`,\r\n                                transformOrigin: 'center center'\r\n                            }}\r\n                        />\r\n                    </motion.div>\r\n                )}\r\n            </AnimatePresence>\r\n        </LayoutGroup>\r\n    );\r\n};\r\n\r\nexport default ImageSlider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}